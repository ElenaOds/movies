{"version":3,"file":"static/js/711.b52608dd.chunk.js","mappings":"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","sources":["components/Card/Card.jsx","components/Card/Card.styled.js","pages/TvShows/TvShows.styled.jsx","pages/TvShows/TvShows.jsx","services/moviesApi.js"],"sourcesContent":["import noimage from '../../assets/imgs/Noimage.jpg'\r\n\r\nimport { StyledCard, CardTitle, CardInfoWrapper, CardText, Img, CardWrapper } from './Card.styled';\r\n\r\nconst Card = ({video}) => {\r\n    const {media_type, poster_path, name, title, release_date, id, first_air_date } = video;\r\n    \r\n\r\n\r\n    return (\r\n    <StyledCard key={id}>\r\n        <Img\r\n            src={poster_path ? `https://image.tmdb.org/t/p/w300${poster_path}` : noimage}\r\n            alt={media_type === \"movie\" ? title : name}\r\n        /> \r\n        <CardWrapper>\r\n        <CardTitle>{media_type === \"movie\" ? title.toUpperCase() : name.toUpperCase()}</CardTitle>\r\n        <CardInfoWrapper>\r\n        <CardText>{media_type === \"movie\" ? new Date(release_date).getFullYear() : new Date(first_air_date).getFullYear()}</CardText> \r\n        <CardText>{media_type === \"movie\" ? media_type.charAt(0).toUpperCase() + media_type.slice(1) : media_type.toUpperCase()}</CardText> \r\n        </CardInfoWrapper>\r\n        </CardWrapper>\r\n    </StyledCard>\r\n  )\r\n}\r\n\r\nexport default Card;\r\n","import styled from 'styled-components';\r\n\r\n\r\n\r\nexport const StyledCard = styled.li`\r\ndisplay: flex;\r\nflex-direction: column;\r\nwidth: 100%;\r\noverflow: hidden;\r\nbox-shadow: 0px 1px 3px rgba(0, 0, 0, 0.12),\r\n        0px 1px 1px rgba(0, 0, 0, 0.14),\r\n        0px 2px 1px rgba(0, 0, 0, 0.2);\r\n\r\n\r\n@media (min-width: 320px) {\r\n    width: 80%;\r\n  }\r\n\r\n    @media (min-width: 640px) {\r\n        width: 48%;\r\n      }\r\n      \r\n      @media (min-width: 768px) {\r\n        width: 31%;\r\n      }\r\n\r\n      @media (min-width: 1280px) {\r\n        width: 23.7%;\r\n      }\r\n`\r\n\r\nconst text = `\r\n    font-weight: 500;\r\n    font-size: 12px;\r\n    line-height: 1.2;\r\n    letter-spacing: 0.02em;\r\n    `\r\n\r\n    export const CardTitle = styled.p`\r\n    ${text}\r\n    overflow: hidden;\r\n    color: var(--secondary-text-color);\r\n    margin-bottom: 4px;\r\n\r\n    @media (min-width: 1280px) {\r\n        font-size: 14px;\r\n    }\r\n`;\r\n\r\nexport const Img = styled.img`\r\n    height: 100%;\r\n`\r\n\r\nexport const CardInfoWrapper = styled.div`\r\n    display: flex;\r\n    justify-content: space-between;\r\n`\r\n\r\nexport const CardText = styled.p`\r\n    ${text}\r\n    color: var(--hover-color);\r\n\r\n    @media (min-width: 1280px) {\r\n        font-size: 14px;\r\n    }\r\n`\r\n\r\nexport const CardWrapper = styled.div`\r\n    padding: 8px;\r\n`","import styled from 'styled-components';\r\n\r\nexport const Section = styled.section`\r\n    padding: 20px 20px;  \r\n   \r\n    @media screen and (min-width: 768px) {\r\n        padding: 32px 32px;   \r\n}\r\n`\r\n\r\nexport const List = styled.ul`\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    gap: 20px;\r\n    justify-content: center;\r\n`","import { useEffect, useState } from 'react'\r\nimport { getTrendingShows } from '../../services/moviesApi';\r\nimport { Section, List } from './TvShows.styled';\r\nimport Card from '../../components/Card/Card';\r\n\r\nconst TvShows = () => {\r\n\r\n  const [videos, setVideos] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const { results } = await getTrendingShows();\r\n        setVideos([...results]);\r\n        console.log(results)\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    };\r\n    fetchData();\r\n  }, []);\r\n  return (\r\n    <Section>\r\n    <List>\r\n        {videos.map(video => {\r\n          return <Card key={video.id} video={video}/>\r\n    })}\r\n    </List>\r\n  \r\n  </Section>\r\n  )\r\n}\r\n\r\nexport default TvShows\r\n","import axios from \"axios\";\r\n\r\nconst KEY = '56fe42c945e3ca855df6abfdcd1328f7';\r\n\r\nconst moviesApi = axios.create({\r\n    baseURL: 'https://api.themoviedb.org/3/',\r\n  });\r\n\r\n  export const getTrendingData = async () => {\r\n    const { data } = await moviesApi.get(`trending/all/day`, {\r\n      params: {\r\n        api_key: KEY,\r\n      },\r\n    });\r\n    return data;\r\n  };\r\n\r\n  export const getTrendingMovies = async () => {\r\n    const { data } = await moviesApi.get(`trending/movie/day`, {\r\n      params: {\r\n        api_key: KEY,\r\n      },\r\n    });\r\n    return data;\r\n  };\r\n\r\n  export const getTrendingShows = async () => {\r\n    const { data } = await moviesApi.get(`trending/tv/day`, {\r\n      params: {\r\n        api_key: KEY,\r\n      },\r\n    });\r\n    return data;\r\n  };\r\n\r\n  export const getTrendingPerson = async () => {\r\n    const { data } = await moviesApi.get(`trending/person/day`, {\r\n      params: {\r\n        api_key: KEY,\r\n      },\r\n    });\r\n    return data;\r\n  };\r\n\r\n  export const getMovieGenre = async () => {\r\n    const { data } = await moviesApi.get(`/genre/movie/list`, {\r\n      params: {\r\n        api_key: KEY,\r\n        language: 'en-US',\r\n      },\r\n    });\r\n    return data;\r\n  };\r\n\r\n\r\n  export const searchQuery = async query => {\r\n    const { data } = await moviesApi.get(`/search/multi`, {\r\n      params: {\r\n        api_key: KEY,\r\n        language: 'en-US',\r\n        page: 1,\r\n        include_adult: false,\r\n        query,\r\n      },\r\n    });\r\n    return data;\r\n  };\r\n  "],"names":["_ref","video","media_type","poster_path","name","title","release_date","id","first_air_date","_jsxs","StyledCard","children","_jsx","Img","src","concat","noimage","alt","CardWrapper","CardTitle","toUpperCase","CardInfoWrapper","CardText","Date","getFullYear","charAt","slice","styled","li","_templateObject","_taggedTemplateLiteral","text","p","_templateObject2","img","_templateObject3","div","_templateObject4","_templateObject5","_templateObject6","Section","section","List","ul","TvShows","videos","setVideos","useState","useEffect","async","results","getTrendingShows","console","log","error","fetchData","map","Card","KEY","moviesApi","axios","create","baseURL","getTrendingData","data","get","params","api_key","getTrendingMovies","getTrendingPerson"],"sourceRoot":""}