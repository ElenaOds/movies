{"version":3,"file":"static/js/394.3e730a1e.chunk.js","mappings":"mNAGO,MAAMA,GAAaC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAYE,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,qFAMzBC,EAAaJ,EAAAA,GAAOK,GAAEC,IAAAA,GAAAH,EAAAA,EAAAA,GAAA,sjBA0B7BI,EAAI,0GAOOC,EAAYR,EAAAA,GAAOS,EAACC,IAAAA,GAAAP,EAAAA,EAAAA,GAAA,gLAC/BI,GAUOI,EAAMX,EAAAA,GAAOY,IAAGC,IAAAA,GAAAV,EAAAA,EAAAA,GAAA,6BAIhBW,EAAkBd,EAAAA,GAAOe,IAAGC,IAAAA,GAAAb,EAAAA,EAAAA,GAAA,mEAK5Bc,EAAWjB,EAAAA,GAAOS,EAACS,IAAAA,GAAAf,EAAAA,EAAAA,GAAA,uHAC1BI,GAQOY,EAAcnB,EAAAA,GAAOe,IAAGK,IAAAA,GAAAjB,EAAAA,EAAAA,GAAA,4B,kGCrE9B,MAAMkB,EAAUrB,EAAAA,GAAOsB,QAAOpB,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,yHAQxBoB,EAAOvB,EAAAA,GAAOwB,GAAElB,IAAAA,GAAAH,EAAAA,EAAAA,GAAA,sG,6BCL7B,MAuBA,EAvBmBsB,IAAsB,IAArB,OAACC,EAAM,MAAEC,GAAMF,EACnC,MAAM,GAAEG,EAAE,KAAEC,EAAI,aAAEC,EAAY,qBAAEC,GAAyBL,EAEvD,OACEM,EAAAA,EAAAA,KAAC5B,EAAAA,GAAU,CAAA6B,UACRC,EAAAA,EAAAA,MAACnC,EAAAA,GAAU,CAACoC,GAAE,WAAAC,OAAaR,GACbA,GAAIA,EAAID,MAAOA,EAAMM,SAAA,EACtCD,EAAAA,EAAAA,KAACrB,EAAAA,GAAG,CACA0B,IAAKP,EAAY,kCAAAM,OAAqCN,GAAiBQ,EACvEC,IAAKV,KAETK,EAAAA,EAAAA,MAACf,EAAAA,GAAW,CAAAc,SAAA,EACZD,EAAAA,EAAAA,KAACxB,EAAAA,GAAS,CAAAyB,SAAEJ,EAAKW,iBACjBR,EAAAA,EAAAA,KAAClB,EAAAA,GAAe,CAAAmB,UACZD,EAAAA,EAAAA,KAACf,EAAAA,GAAQ,CAAAgB,SAAEF,WARFH,IAFIA,EAeR,ECWb,EA7Bea,KACb,MAAMC,GAAWC,EAAAA,EAAAA,OACRC,EAASC,IAAcC,EAAAA,EAAAA,UAAS,IAezC,OAbEC,EAAAA,EAAAA,YAAU,KACUC,WAChB,IACE,MAAM,QAAEC,SAAkBC,EAAAA,EAAAA,MAC1BL,EAAW,IAAII,GAEjB,CAAE,MAAOE,GACPC,QAAQD,MAAMA,EAChB,GAEFE,EAAW,GACV,KAGHrB,EAAAA,EAAAA,KAACX,EAAO,CAAAY,UACRD,EAAAA,EAAAA,KAACT,EAAI,CAAAU,SACAW,EAAQU,KAAI5B,IACJM,EAAAA,EAAAA,KAACuB,EAAU,CAAiB7B,OAAQA,EAAQC,MAAO,CAAC6B,KAAMd,IAAzChB,EAAOE,SAI7B,C","sources":["components/Card/Card.styled.js","pages/Person/Person.styled.jsx","components/Card/PersonCard.jsx","pages/Person/Person.jsx"],"sourcesContent":["import styled from 'styled-components';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport const StyledLink = styled(Link)`\r\n   text-decoration: none;\r\n   display: flex;\r\n    flex-direction: column;\r\n`\r\n\r\nexport const StyledCard = styled.li`\r\nwidth: 100%;\r\nmargin-bottom: 20px;\r\nbox-shadow: 0px 1px 3px rgba(0, 0, 0, 0.12),\r\n        0px 1px 1px rgba(0, 0, 0, 0.14),\r\n        0px 2px 1px rgba(0, 0, 0, 0.2);\r\n\r\n\r\n    @media (min-width: 480px) {\r\n        width: calc((100% - 4 * 10px) / 2);\r\n        margin: 10px;\r\n    }\r\n\r\n    @media (min-width: 640px) {\r\n        width: calc((100% - 6 * 10px) / 3);\r\n      }\r\n      \r\n      @media (min-width: 768px) {\r\n        width: calc((100% - 8 * 10px) / 4);\r\n      }\r\n\r\n      @media (min-width: 1280px) {\r\n        width: calc((100% - 10 * 10px) / 5);\r\n      }\r\n`\r\n\r\nconst text = `\r\n    font-weight: 500;\r\n    font-size: 12px;\r\n    line-height: 1.2;\r\n    letter-spacing: 0.02em;\r\n    `\r\n\r\n    export const CardTitle = styled.p`\r\n    ${text}\r\n    overflow: hidden;\r\n    color: var(--secondary-text-color);\r\n    margin-bottom: 4px;\r\n\r\n    @media (min-width: 1280px) {\r\n        font-size: 14px;\r\n    }\r\n`;\r\n\r\nexport const Img = styled.img`\r\n    height: 100%;\r\n`\r\n\r\nexport const CardInfoWrapper = styled.div`\r\n    display: flex;\r\n    justify-content: space-between;\r\n`\r\n\r\nexport const CardText = styled.p`\r\n    ${text}\r\n    color: var(--hover-color);\r\n\r\n    @media (min-width: 1280px) {\r\n        font-size: 14px;\r\n    }\r\n`\r\n\r\nexport const CardWrapper = styled.div`\r\n    padding: 8px;\r\n`","import styled from 'styled-components';\r\n\r\nexport const Section = styled.section`\r\n    padding: 20px 20px;  \r\n   \r\n    @media screen and (min-width: 768px) {\r\n        padding: 32px 32px;   \r\n}\r\n`\r\n\r\nexport const List = styled.ul`\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    justify-content: center;\r\n    margin: -10px;\r\n`","import noimage from '../../assets/imgs/Noimage.jpg'\r\n\r\nimport { StyledCard, StyledLink, CardTitle, Img, CardWrapper,CardInfoWrapper, CardText } from './Card.styled';\r\n\r\n\r\nconst PersonCard = ({person, state}) => {\r\nconst { id, name, profile_path, known_for_department } = person;\r\n\r\n  return (\r\n    <StyledCard key={id}>\r\n       <StyledLink to={`/person/${id}`} \r\n            key={id} id={id} state={state}>\r\n    <Img\r\n        src={profile_path ? `https://image.tmdb.org/t/p/w300${profile_path}` : noimage}\r\n        alt={name}\r\n    /> \r\n    <CardWrapper>\r\n    <CardTitle>{name.toUpperCase()}</CardTitle>\r\n    <CardInfoWrapper>\r\n        <CardText>{known_for_department}</CardText> \r\n       \r\n        </CardInfoWrapper>\r\n    </CardWrapper>\r\n    </StyledLink>\r\n</StyledCard>\r\n  )\r\n}\r\n\r\nexport default PersonCard\r\n","import { useEffect, useState } from 'react'\r\nimport { getTrendingPerson } from '../../services/moviesApi';\r\nimport { useLocation  } from \"react-router-dom\";\r\nimport { Section, List } from './Person.styled';\r\nimport PersonCard from '../../components/Card/PersonCard';\r\n\r\nconst Person = () => {\r\n  const location = useLocation();\r\n    const [persons, setPersons] = useState([]);\r\n\r\n    useEffect(() => {\r\n      const fetchData = async () => {\r\n        try {\r\n          const { results } = await getTrendingPerson();\r\n          setPersons([...results]);\r\n          // console.log(results)\r\n        } catch (error) {\r\n          console.error(error);\r\n        }\r\n      };\r\n      fetchData();\r\n    }, []);\r\n  \r\n  return (\r\n    <Section>\r\n    <List>\r\n        {persons.map(person => {\r\n          return <PersonCard key={person.id} person={person} state={{from: location}}/>\r\n    })}\r\n    </List>\r\n  \r\n  </Section>\r\n  )\r\n}\r\n\r\nexport default Person\r\n"],"names":["StyledLink","styled","Link","_templateObject","_taggedTemplateLiteral","StyledCard","li","_templateObject2","text","CardTitle","p","_templateObject3","Img","img","_templateObject4","CardInfoWrapper","div","_templateObject5","CardText","_templateObject6","CardWrapper","_templateObject7","Section","section","List","ul","_ref","person","state","id","name","profile_path","known_for_department","_jsx","children","_jsxs","to","concat","src","noimage","alt","toUpperCase","Person","location","useLocation","persons","setPersons","useState","useEffect","async","results","getTrendingPerson","error","console","fetchData","map","PersonCard","from"],"sourceRoot":""}